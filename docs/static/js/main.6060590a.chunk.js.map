{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,YADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,IACdO,QAAQC,IAAI,mBAOZ,2BACIC,KAAO,OACPC,MAAUX,EAEVY,SApBc,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,Y,uBCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OAFAT,QAAQC,IAAI,CAAEiB,KAAIC,QAAOV,QAGrB,yBAAKc,UAAU,0CAEX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCLJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECFf,SAAEA,GAAe,IAAD,EAEdhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGZ,CAAEpB,IAEEqB,EDO0BM,CAAc3B,GAAlCa,EA1B0B,EA0B/BN,KAAaa,EA1BkB,EA0BlBA,QAIrB,OAHA3B,QAAQC,IAAI0B,GACZ3B,QAAQC,IAAImB,GAGR,oCACI,4BAAMb,GAEN,yBAAKgB,UAAU,oCACVI,GAAW,eAEhB,yBAAKJ,UAAU,aAEVH,EAAOJ,KAAK,SAAAC,GAAG,OAEZ,kBAAC,EAAD,eACIkB,IAAMlB,EAAIC,IACLD,UEddmB,EA9BM,WAAM,MAGa7C,mBAAS,CAAC,cAHvB,mBAGhB8C,EAHgB,KAGJ/C,EAHI,KASvB,OACA,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAIQ+C,EAAWrB,KAAK,SAACT,GAAD,OACZ,kBAAC,EAAD,CACI4B,IAAM5B,EACNA,SAAWA,U,MCpB/B+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6060590a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('Category');\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(categ => [inputValue, ...categ]);\r\n            setInputValue('');\r\n            console.log('Submit hecho');\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <form onSubmit = { handleSubmit }> \r\n            { /* <h3> { inputValue }</h3> */ } \r\n            <input \r\n                type = \"text\"\r\n                value = { inputValue }\r\n                // onChange={ (e) => console.log(e)}\r\n                onChange = { handleInputChange }\r\n            /> \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async( category ) => {\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=a3z2wabmEvP8aac1V3Ys88TGexqpqvvz`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    console.log({ id, title, url });\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__zoomIn\">\r\n            {/* { img.title } */}\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    /* const [ images, setImages ] = useState( [] );\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( setImages );\r\n    }, [ category ])\r\n\r\n    const getGifs = async() => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=a3z2wabmEvP8aac1V3Ys88TGexqpqvvz`;\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n        // console.log(data);\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        console.log(gifs);\r\n        setImages(gifs);\r\n    }\r\n    // getGifs(); */\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    console.log(loading);\r\n    console.log(images);\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            {/* { loading ? 'Cargando...' : 'Data Cargada!' } */}\r\n            <div className=\"animate__animated animate__flash\">\r\n                {loading && 'Cargando...'}\r\n            </div>\r\n            <div className=\"card-grid\">\r\n                {/* {images.map( ( img ) => ( */}\r\n                {images.map( img  => (\r\n                    // <li key={ id }>{ title }</li>\r\n                    <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img }// img={ img }\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setTimeout( () => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                }, 2000);\r\n            })\r\n\r\n    }, [ category ])\r\n\r\n    return state; //{ data:[], loading: true };\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n    const [categories, setCategories] = useState(['One Punch']); // 'Samurai X', 'Dragon Ball'\r\n    // const handleAdd = () => {\r\n    //     // setCategories( [...categories, 'HunterxHunter'] );\r\n    //     setCategories( categ => [ 'HunterxHunter', ...categories ])\r\n    // }\r\n\r\n    return (\r\n    <>\r\n    <h2>GifExpertApp</h2>\r\n    <AddCategory setCategories={ setCategories }/>\r\n    <hr />\r\n    {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n    <ol>\r\n        {\r\n            // categories.map( (category, i) => {\r\n            //     return <li key={i}>{ category }</li>})\r\n            categories.map( (category) => (\r\n                <GifGrid \r\n                    key={ category }\r\n                    category={ category } \r\n                />    \r\n            ))\r\n        }\r\n    </ol>\r\n    </>)\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render( \n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}